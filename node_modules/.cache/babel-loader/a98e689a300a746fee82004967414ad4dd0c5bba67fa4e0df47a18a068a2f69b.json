{"ast":null,"code":"function loadDevTools(callback) {\n  // check URL first\n  const url = new URL(window.location);\n  const setInUrl = url.searchParams.has('dev-tools');\n  const urlEnabled = url.searchParams.get('dev-tools') === 'true';\n  if (setInUrl) {\n    if (urlEnabled) {\n      return go();\n    } else {\n      return callback();\n    }\n  }\n\n  // the check localStorage\n  const localStorageValue = window.localStorage.getItem('dev-tools');\n  const setInLocalStorage = localStorageValue != undefined;\n  const localStorageEnabled = localStorageValue === 'true';\n  if (setInLocalStorage) {\n    if (localStorageEnabled) {\n      return go();\n    } else {\n      return callback();\n    }\n  }\n\n  // the default is off in Cypress\n  if (window.Cypress) return callback();\n\n  // the default is on in development\n  if (process.env.NODE_ENV === 'development') return go();\n  return callback();\n  function go() {\n    // use a dynamic import so the dev-tools code isn't bundled with the regular\n    // app code so we don't worry about bundle size.\n    import('./dev-tools').then(devTools => devTools.install()).finally(callback);\n  }\n}\nexport { loadDevTools };\n\n/*\r\neslint\r\n  eqeqeq: \"off\",\r\n*/","map":{"version":3,"names":["loadDevTools","callback","url","URL","window","location","setInUrl","searchParams","has","urlEnabled","get","go","localStorageValue","localStorage","getItem","setInLocalStorage","undefined","localStorageEnabled","Cypress","process","env","NODE_ENV","then","devTools","install","finally"],"sources":["C:/Users/domin/Desktop/ReactBookshelf/books/src/dev-tools/load.js"],"sourcesContent":["function loadDevTools(callback) {\r\n    // check URL first\r\n    const url = new URL(window.location)\r\n    const setInUrl = url.searchParams.has('dev-tools')\r\n    const urlEnabled = url.searchParams.get('dev-tools') === 'true'\r\n    if (setInUrl) {\r\n      if (urlEnabled) {\r\n        return go()\r\n      } else {\r\n        return callback()\r\n      }\r\n    }\r\n  \r\n    // the check localStorage\r\n    const localStorageValue = window.localStorage.getItem('dev-tools')\r\n    const setInLocalStorage = localStorageValue != undefined\r\n    const localStorageEnabled = localStorageValue === 'true'\r\n    if (setInLocalStorage) {\r\n      if (localStorageEnabled) {\r\n        return go()\r\n      } else {\r\n        return callback()\r\n      }\r\n    }\r\n  \r\n    // the default is off in Cypress\r\n    if (window.Cypress) return callback()\r\n  \r\n    // the default is on in development\r\n    if (process.env.NODE_ENV === 'development') return go()\r\n  \r\n    return callback()\r\n  \r\n    function go() {\r\n      // use a dynamic import so the dev-tools code isn't bundled with the regular\r\n      // app code so we don't worry about bundle size.\r\n      import('./dev-tools')\r\n        .then(devTools => devTools.install())\r\n        .finally(callback)\r\n    }\r\n  }\r\n  \r\n  export {loadDevTools}\r\n  \r\n  /*\r\n  eslint\r\n    eqeqeq: \"off\",\r\n  */\r\n  "],"mappings":"AAAA,SAASA,YAAY,CAACC,QAAQ,EAAE;EAC5B;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAAC;EACpC,MAAMC,QAAQ,GAAGJ,GAAG,CAACK,YAAY,CAACC,GAAG,CAAC,WAAW,CAAC;EAClD,MAAMC,UAAU,GAAGP,GAAG,CAACK,YAAY,CAACG,GAAG,CAAC,WAAW,CAAC,KAAK,MAAM;EAC/D,IAAIJ,QAAQ,EAAE;IACZ,IAAIG,UAAU,EAAE;MACd,OAAOE,EAAE,EAAE;IACb,CAAC,MAAM;MACL,OAAOV,QAAQ,EAAE;IACnB;EACF;;EAEA;EACA,MAAMW,iBAAiB,GAAGR,MAAM,CAACS,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAClE,MAAMC,iBAAiB,GAAGH,iBAAiB,IAAII,SAAS;EACxD,MAAMC,mBAAmB,GAAGL,iBAAiB,KAAK,MAAM;EACxD,IAAIG,iBAAiB,EAAE;IACrB,IAAIE,mBAAmB,EAAE;MACvB,OAAON,EAAE,EAAE;IACb,CAAC,MAAM;MACL,OAAOV,QAAQ,EAAE;IACnB;EACF;;EAEA;EACA,IAAIG,MAAM,CAACc,OAAO,EAAE,OAAOjB,QAAQ,EAAE;;EAErC;EACA,IAAIkB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE,OAAOV,EAAE,EAAE;EAEvD,OAAOV,QAAQ,EAAE;EAEjB,SAASU,EAAE,GAAG;IACZ;IACA;IACA,MAAM,CAAC,aAAa,CAAC,CAClBW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE,CAAC,CACpCC,OAAO,CAACxB,QAAQ,CAAC;EACtB;AACF;AAEA,SAAQD,YAAY;;AAEpB;AACF;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}